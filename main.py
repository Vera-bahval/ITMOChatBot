import asyncio
import logging
import os
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from dotenv import load_dotenv
from data_parser import DataParser
from vector_db import VectorDB
from ai_assistant import AIAssistant
load_dotenv()

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class ITMOChatBot:
    def __init__(self):
        self.bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
        if not self.bot_token:
            raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è! "
                           "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–æ–∑–¥–∞–Ω .env —Ñ–∞–π–ª —Å —Ç–æ–∫–µ–Ω–æ–º.")
        
        self.vector_db = VectorDB()
        self.ai_assistant = AIAssistant()
        self.user_contexts = {} 
        self.initialized = False
        
    async def initialize_data(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è"""
        if self.initialized:
            return
            
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞...")
        
        try:
            parser = DataParser()
            programs_data = await parser.parse_programs()
            await self.vector_db.create_database(programs_data)
            
            self.initialized = True
            logger.info("–î–∞–Ω–Ω—ã–µ –≥–æ—Ç–æ–≤—ã!")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            raise

    #–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ —Å –ø–æ–º–æ—â—å—é –ò–ò
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        try:
            if not self.initialized:
                await update.message.reply_text("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ...")
                await self.initialize_data()
            
            user_id = update.effective_user.id
            self.user_contexts[user_id] = {'stage': 'start', 'background': {}}
            
            welcome_message = """
üéì –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –≤—ã–±—Ä–∞—Ç—å –º–∞–≥–∏—Å—Ç–µ—Ä—Å–∫—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É –ò–¢–ú–û –≤ –æ–±–ª–∞—Å—Ç–∏ –ò–ò.

üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã:
‚Ä¢ –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ò–ò-–ø—Ä–æ–¥—É–∫—Ç–∞–º–∏/AI Product

–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–≤–æ–µ–º –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ –∏ –æ–ø—ã—Ç–µ, —á—Ç–æ–±—ã —è –º–æ–≥ –¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏!
            """
            await update.message.reply_text(welcome_message)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ start_command: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        try:
            help_text = """
ü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥
/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
/reset - –°–±—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –±–µ—Å–µ–¥—ã

‚ùì –ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:
‚Ä¢ "–ö–∞–∫–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã –∏–∑—É—á–∞—é—Ç –Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ò–ò?"
‚Ä¢ "–ß–µ–º –æ—Ç–ª–∏—á–∞—é—Ç—Å—è –ø—Ä–æ–≥—Ä–∞–º–º—ã?"
‚Ä¢ "–ö–∞–∫ –ø–æ—Å—Ç—É–ø–∏—Ç—å –±–µ–∑ —ç–∫–∑–∞–º–µ–Ω–æ–≤?"
‚Ä¢ "–ö–∞–∫–∏–µ –≤—ã–±–æ—Ä–Ω—ã–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –ª—É—á—à–µ –≤–∑—è—Ç—å?"
            """
            await update.message.reply_text(help_text)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ help_command: {e}")
    
    async def reset_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–±—Ä–æ—Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            user_id = update.effective_user.id
            self.user_contexts[user_id] = {'stage': 'start', 'background': {}}
            await update.message.reply_text("–ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–±—Ä–æ—à–µ–Ω. –ú–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ!")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ reset_command: {e}")
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            if not self.initialized:
                await update.message.reply_text("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ...")
                await self.initialize_data()
            
            user_id = update.effective_user.id
            message = update.message.text
            if user_id not in self.user_contexts:
                self.user_contexts[user_id] = {'stage': 'start', 'background': {}}
            relevant_docs = await self.vector_db.search(message)
            response = await self.ai_assistant.generate_response(
                message, 
                relevant_docs, 
                self.user_contexts[user_id]
            )
            await self._update_user_context(user_id, message)
            
            await update.message.reply_text(response, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await update.message.reply_text(
                "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å."
            )
    
    async def _update_user_context(self, user_id: int, message: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            message_lower = message.lower()
            
            if '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç' in message_lower or '—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫' in message_lower:
                self.user_contexts[user_id]['background']['programming'] = True
            
            if '–∞–Ω–∞–ª–∏—Ç–∏–∫' in message_lower or '–¥–∞–Ω–Ω—ã–µ' in message_lower:
                self.user_contexts[user_id]['background']['analytics'] = True
            
            if '–º–µ–Ω–µ–¥–∂–µ—Ä' in message_lower or '—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ' in message_lower:
                self.user_contexts[user_id]['background']['management'] = True
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {e}")
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            logger.info("–°–æ–∑–¥–∞–Ω–∏–µ Telegram Application...")
            application = Application.builder().token(self.bot_token).build()
            application.add_handler(CommandHandler("start", self.start_command))
            application.add_handler(CommandHandler("help", self.help_command))
            application.add_handler(CommandHandler("reset", self.reset_command))
            application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
            
            logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
            application.run_polling(drop_pending_updates=True)
            
        except KeyboardInterrupt:
            logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
            raise

def main():
    try:
        bot = ITMOChatBot()
        bot.run()
        
    except KeyboardInterrupt:
        logger.info("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()