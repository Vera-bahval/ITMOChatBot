import asyncio
import logging
import os
import re
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from dotenv import load_dotenv
from data_parser import DataParser
from vector_db import VectorDB
from ai_assistant import AIAssistant

load_dotenv()

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

#–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –ò–ò
class ContextAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    def __init__(self):
        self.background_patterns = {
            'programming': [
                r'\b(–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç|—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫|developer|python|java|javascript|c\+\+|c#)\b',
                r'\b(frontend|backend|fullstack|–≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞|–º–æ–±–∏–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞)\b',
                r'\b(git|github|–∞–ª–≥–æ—Ä–∏—Ç–º|—Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö|–∫–æ–¥|–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ)\b',
                r'\b(react|vue|angular|django|flask|spring|node\.js)\b'
            ],
            'analytics': [
                r'\b(–∞–Ω–∞–ª–∏—Ç–∏–∫|analyst|–¥–∞–Ω–Ω—ã–µ|data|—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞|excel|sql|tableau)\b',
                r'\b(–±–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏—Ç–∏–∫|data scientist|–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è|–º–µ—Ç—Ä–∏–∫–∏|bi)\b',
                r'\b(pandas|numpy|r|—Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑|–æ—Ç—á–µ—Ç—ã|dashboard)\b',
                r'\b(power bi|qlik|looker|matplotlib|seaborn)\b'
            ],
            'management': [
                r'\b(–º–µ–Ω–µ–¥–∂–µ—Ä|manager|—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å|—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ|–ø—Ä–æ–µ–∫—Ç|–∫–æ–º–∞–Ω–¥–∞)\b',
                r'\b(product manager|project manager|scrum|agile|–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ)\b',
                r'\b(–ª–∏–¥–µ—Ä—Å—Ç–≤–æ|–∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è|–±—é–¥–∂–µ—Ç|—Å—Ç—Ä–∞—Ç–µ–≥–∏—è|roadmap)\b',
                r'\b(jira|confluence|trello|asana|—É–ø—Ä–∞–≤–ª—è—é|—Ä—É–∫–æ–≤–æ–∂—É)\b'
            ],
            'ml_experience': [
                r'\b(–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ|ml|deep learning|–Ω–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏|ai)\b',
                r'\b(tensorflow|pytorch|scikit-learn|keras|pandas)\b',
                r'\b(kaggle|–º–æ–¥–µ–ª–∏|–∞–ª–≥–æ—Ä–∏—Ç–º—ã ml|feature engineering)\b',
                r'\b(computer vision|nlp|–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π|—Ç–µ–∫—Å—Ç–∞)\b'
            ],
            'education': [
                r'\b(—Å—Ç—É–¥–µ–Ω—Ç|—É—á—É—Å—å|—É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç|–∏–Ω—Å—Ç–∏—Ç—É—Ç|–±–∞–∫–∞–ª–∞–≤—Ä|—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç)\b',
                r'\b(–¥–∏–ø–ª–æ–º|–∫—É—Ä—Å–æ–≤–∞—è|—ç–∫–∑–∞–º–µ–Ω|—Å–µ—Å—Å–∏—è|–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å|–≤—É–∑)\b',
                r'\b(–∏—Ç–º–æ|—Å–ø–±–≥—É|–º–≥—É|–≤—à—ç|–ø–æ–ª–∏—Ç–µ—Ö|–º—Ñ—Ç–∏|–º–∏—Ñ–∏)\b'
            ]
        }
        
        self.experience_patterns = {
            'junior': r'\b(–Ω–æ–≤–∏—á–æ–∫|junior|–Ω–∞—á–∏–Ω–∞—é—â–∏–π|–±–µ–∑ –æ–ø—ã—Ç–∞|–ø–µ—Ä–≤—ã–π —Ä–∞–∑|–∏–∑—É—á–∞—é)\b',
            'middle': r'\b(middle|–æ–ø—ã—Ç–Ω—ã–π|–Ω–µ—Å–∫–æ–ª—å–∫–æ –ª–µ—Ç|—Ä–∞–±–æ—Ç–∞—é|–≥–æ–¥|–ª–µ—Ç –æ–ø—ã—Ç–∞)\b',
            'senior': r'\b(senior|—ç–∫—Å–ø–µ—Ä—Ç|–º–Ω–æ–≥–æ –ª–µ—Ç|—Ä—É–∫–æ–≤–æ–¥–∏–ª|–≤–µ–¥—É—â–∏–π|–≥–ª–∞–≤–Ω—ã–π)\b'
        }
        
        self.interest_patterns = {
            'computer_vision': r'\b(–∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ|cv|–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è|–∫–∞—Ä—Ç–∏–Ω–∫–∏|opencv|yolo)\b',
            'nlp': r'\b(nlp|–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞|—á–∞—Ç-–±–æ—Ç|—è–∑—ã–∫–æ–≤—ã–µ –º–æ–¥–µ–ª–∏|gpt|bert)\b',
            'product_development': r'\b(–ø—Ä–æ–¥—É–∫—Ç|product|–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏|–º–µ—Ç—Ä–∏–∫–∏|growth|mvp)\b',
            'research': r'\b(–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è|–Ω–∞—É–∫–∞|–Ω–∞—É—á–Ω–∞—è|—Å—Ç–∞—Ç—å–∏|–ø—É–±–ª–∏–∫–∞—Ü–∏–∏|–∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏)\b'
        }
    
    def analyze_message(self, message: str) -> dict:
        """–ê–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        message_lower = message.lower()
        
        analysis = {
            'background': {},
            'experience_level': None,
            'interests': [],
            'education_mentioned': False
        }

        for category, patterns in self.background_patterns.items():
            detected = any(re.search(pattern, message_lower, re.IGNORECASE) for pattern in patterns)
            if category == 'education':
                analysis['education_mentioned'] = detected
            else:
                analysis['background'][category] = detected

        for level, pattern in self.experience_patterns.items():
            if re.search(pattern, message_lower, re.IGNORECASE):
                analysis['experience_level'] = level
                break

        for interest, pattern in self.interest_patterns.items():
            if re.search(pattern, message_lower, re.IGNORECASE):
                analysis['interests'].append(interest)
        
        return analysis

class ITMOChatBot:
    def __init__(self):
        self.bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
        if not self.bot_token:
            raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è! "
                           "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–æ–∑–¥–∞–Ω .env —Ñ–∞–π–ª —Å —Ç–æ–∫–µ–Ω–æ–º.")
        
        self.vector_db = VectorDB()
        self.ai_assistant = AIAssistant()
        self.context_analyzer = ContextAnalyzer()
        self.user_contexts = {} 
        self.initialized = False
        
    async def initialize_data(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è"""
        if self.initialized:
            return
            
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞...")
        
        try:
            parser = DataParser()
            programs_data = await parser.parse_programs()
            await self.vector_db.create_database(programs_data)
            
            self.initialized = True
            logger.info("–î–∞–Ω–Ω—ã–µ –≥–æ—Ç–æ–≤—ã!")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            raise

    #–õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–æ–º–∞–Ω–¥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –ò–ò
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            if not self.initialized:
                await update.message.reply_text("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ...")
                await self.initialize_data()
            
            user_id = update.effective_user.id
            self.user_contexts[user_id] = {
                'stage': 'start', 
                'background': {},
                'experience_level': None,
                'interests': [],
                'message_history': []
            }
            
            welcome_message = """
üéì *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!*

–Ø –ø–æ–º–æ–≥—É –≤—ã–±—Ä–∞—Ç—å –º–∞–≥–∏—Å—Ç–µ—Ä—Å–∫—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É –ò–¢–ú–û –≤ –æ–±–ª–∞—Å—Ç–∏ –ò–ò –∏ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –ø–ª–∞–Ω –æ–±—É—á–µ–Ω–∏—è.

üìö *–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã:*
‚Ä¢ –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ò–ò-–ø—Ä–æ–¥—É–∫—Ç–∞–º–∏/AI Product

üí¨ *–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:*
‚Ä¢ –ö–∞–∫–æ–π —É –≤–∞—Å –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã?
‚Ä¢ –ö–∞–∫–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∑–Ω–∞–µ—Ç–µ?
‚Ä¢ –ö–∞–∫–∏–µ —Ü–µ–ª–∏ –ø—Ä–µ—Å–ª–µ–¥—É–µ—Ç–µ?

–ù–∞–ø—Ä–∏–º–µ—Ä: "–Ø –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç –Ω–∞ Python, —Ä–∞–±–æ—Ç–∞—é 3 –≥–æ–¥–∞, –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç ML"
            """
            await update.message.reply_text(welcome_message, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ start_command: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        try:
            help_text = """
ü§ñ *–ö–æ–º–∞–Ω–¥—ã:*
/start - –ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥
/help - –°–ø—Ä–∞–≤–∫–∞
/reset - –°–±—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç
/profile - –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å

‚ùì *–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:*
‚Ä¢ "–ß–µ–º –æ—Ç–ª–∏—á–∞—é—Ç—Å—è –ø—Ä–æ–≥—Ä–∞–º–º—ã?"
‚Ä¢ "–ö–∞–∫ –ø–æ—Å—Ç—É–ø–∏—Ç—å –±–µ–∑ —ç–∫–∑–∞–º–µ–Ω–æ–≤?"
‚Ä¢ "–ö–∞–∫—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É –≤—ã–±—Ä–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—É?"
‚Ä¢ "–ö–∞–∫–∏–µ –≤—ã–±–æ—Ä–Ω—ã–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –≤–∑—è—Ç—å?"
‚Ä¢ "–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç –æ–±—É—á–µ–Ω–∏–µ?"

üí° *–°–æ–≤–µ—Ç:* –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–≤–æ–µ–º –æ–ø—ã—Ç–µ –¥–ª—è –ª—É—á—à–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π!
            """
            await update.message.reply_text(help_text, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ help_command: {e}")
    
    async def profile_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            user_id = update.effective_user.id
            
            if user_id not in self.user_contexts:
                await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏—Ç–µ /start")
                return
            
            user_context = self.user_contexts[user_id]
            background = user_context.get('background', {})
            
            if not any(background.values()):
                profile_text = "üìã *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –ø—É—Å—Ç*\n\n–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–≤–æ–µ–º –æ–ø—ã—Ç–µ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π!"
            else:
                profile_parts = ["üìã *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:*\n"]
                
                if background.get('programming'):
                    profile_parts.append("üíª –û–ø—ã—Ç –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è")
                if background.get('analytics'):
                    profile_parts.append("üìä –û–ø—ã—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∏/—Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏")
                if background.get('management'):
                    profile_parts.append("üë• –û–ø—ã—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è/–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞")
                if background.get('ml_experience'):
                    profile_parts.append("ü§ñ –û–ø—ã—Ç –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è")
                
                if user_context.get('experience_level'):
                    level_emoji = {'junior': 'üå±', 'middle': 'üìà', 'senior': 'üöÄ'}
                    level = user_context['experience_level']
                    profile_parts.append(f"{level_emoji.get(level, 'üìä')} –£—Ä–æ–≤–µ–Ω—å: {level}")
                
                if user_context.get('interests'):
                    interests = ', '.join(user_context['interests'])
                    profile_parts.append(f"üéØ –ò–Ω—Ç–µ—Ä–µ—Å—ã: {interests}")
                
                profile_text = "\n".join(profile_parts)
            
            await update.message.reply_text(profile_text, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ profile_command: {e}")
    
    async def reset_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–±—Ä–æ—Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            user_id = update.effective_user.id
            self.user_contexts[user_id] = {
                'stage': 'start', 
                'background': {},
                'experience_level': None,
                'interests': [],
                'message_history': []
            }
            await update.message.reply_text("üîÑ –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–±—Ä–æ—à–µ–Ω. –ú–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ!")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ reset_command: {e}")
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            if not self.initialized:
                await update.message.reply_text("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ...")
                await self.initialize_data()
            
            user_id = update.effective_user.id
            message = update.message.text

            if user_id not in self.user_contexts:
                self.user_contexts[user_id] = {
                    'stage': 'start', 
                    'background': {},
                    'experience_level': None,
                    'interests': [],
                    'message_history': []
                }
            
            self.user_contexts[user_id]['message_history'].append(message)
 
            analysis = self.context_analyzer.analyze_message(message)
            self._update_user_context(user_id, analysis)
   
            relevant_docs = await self.vector_db.search(message)

            response = await self.ai_assistant.generate_response(
                message, 
                relevant_docs, 
                self.user_contexts[user_id]
            )
            
            await update.message.reply_text(response, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await update.message.reply_text(
                "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å."
            )
    
    def _update_user_context(self, user_id: int, analysis: dict):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞"""
        try:
            user_context = self.user_contexts[user_id]

            for category, detected in analysis['background'].items():
                if detected:
                    user_context['background'][category] = True
            if analysis.get('experience_level'):
                user_context['experience_level'] = analysis['experience_level']
            if analysis.get('interests'):
                current_interests = set(user_context.get('interests', []))
                new_interests = set(analysis['interests'])
                user_context['interests'] = list(current_interests | new_interests)
            if any(analysis['background'].values()) or analysis.get('experience_level') or analysis.get('interests'):
                logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {user_context}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {e}")
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            logger.info("–°–æ–∑–¥–∞–Ω–∏–µ Telegram Application...")
            application = Application.builder().token(self.bot_token).build()
            application.add_handler(CommandHandler("start", self.start_command))
            application.add_handler(CommandHandler("help", self.help_command))
            application.add_handler(CommandHandler("profile", self.profile_command))
            application.add_handler(CommandHandler("reset", self.reset_command))
            application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
            
            logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
            application.run_polling(drop_pending_updates=True)
            
        except KeyboardInterrupt:
            logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
            raise

def main():
    try:
        bot = ITMOChatBot()
        bot.run()
        
    except KeyboardInterrupt:
        logger.info("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()
